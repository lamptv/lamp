//menu_filter.js
/*
  Lampa Menu Filter ‚Äî v1.4 (2025-01-24)
  –¶–ï–õ–¨: –†–∞–±–æ—Ç–∞—Ç—å –¢–û–õ–¨–ö–û —Å –õ–ï–í–´–ú –ë–û–ö–û–í–´–ú –ú–ï–ù–Æ.
  ‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∏ —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å –ø—É–Ω–∫—Ç—ã —Ä–æ–≤–Ω–æ —Ç–∞–∫:
      –ì–ª–∞–≤–Ω–∞—è ‚Üí –ü–æ–∏—Å–∫ ‚Üí –ò—Å—Ç–æ—Ä–∏—è ‚Üí –ö–æ–ª–ª–µ–∫—Ü–∏–∏ ‚Üí –ö–∞—Ç–∞–ª–æ–≥ ‚Üí –§–∏–ª—å—Ç—Ä ‚Üí –§–∏–ª—å–º—ã ‚Üí –°–µ—Ä–∏–∞–ª—ã ‚Üí –†–µ–ª–∏–∑—ã
  ‚Ä¢ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ª–µ–≤–æ–≥–æ –º–µ–Ω—é —Å–∫—Ä—ã—Ç—å.
  ‚Ä¢ ¬´–ü–æ–∏—Å–∫¬ª —Å–¥–µ–ª–∞—Ç—å —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–º –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º.
  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ru/en –∞–ª–∏–∞—Å–æ–≤, –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ DOM (MutationObserver).
*/

(function(){
  'use strict';

  /*** === –ö–û–ù–§–ò–ì: –∂–µ–ª–∞–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ –õ–ï–í–û–ì–û –ú–ï–ù–Æ === ***/
  const WHITELIST_ORDER = [
    '–ì–ª–∞–≤–Ω–∞—è',
    '–ü–æ–∏—Å–∫', 
    '–ò—Å—Ç–æ—Ä–∏—è',
    '–ö–æ–ª–ª–µ–∫—Ü–∏–∏',
    '–ö–∞—Ç–∞–ª–æ–≥',
    '–§–∏–ª—å—Ç—Ä',
    '–§–∏–ª—å–º—ã',
    '–°–µ—Ä–∏–∞–ª—ã',
    '–†–µ–ª–∏–∑—ã'
  ];

  /*** –ê–ª–∏–∞—Å—ã: —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º –ø–æ–¥–ø–∏—Å–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞–ª—è—Ö/—Å–±–æ—Ä–∫–∞—Ö ***/
  const ALIASES = {
    '–ì–ª–∞–≤–Ω–∞—è'   : ['–ì–ª–∞–≤–Ω–∞—è','Home','Main'],
    '–ü–æ–∏—Å–∫'     : ['–ü–æ–∏—Å–∫','Search'],
    '–ò—Å—Ç–æ—Ä–∏—è'   : ['–ò—Å—Ç–æ—Ä–∏—è','History','Recently watched'],
    '–ö–æ–ª–ª–µ–∫—Ü–∏–∏' : ['–ö–æ–ª–ª–µ–∫—Ü–∏–∏','Collections','–ü–æ–¥–±–æ—Ä–∫–∏','Library'],
    '–ö–∞—Ç–∞–ª–æ–≥'   : ['–ö–∞—Ç–∞–ª–æ–≥','Library','Catalog','Browse'],
    '–§–∏–ª—å—Ç—Ä'    : ['–§–∏–ª—å—Ç—Ä','Filter','Filters'],
    '–§–∏–ª—å–º—ã'    : ['–§–∏–ª—å–º—ã','Movies','HD –§–∏–ª—å–º—ã','Films','Movie'],
    '–°–µ—Ä–∏–∞–ª—ã'   : ['–°–µ—Ä–∏–∞–ª—ã','Series','TV Shows','TV'],
    '–†–µ–ª–∏–∑—ã'    : ['–†–µ–ª–∏–∑—ã','Releases','HD –†–µ–ª–∏–∑—ã','HD Releases','New']
  };

  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –õ–ï–í–û–ì–û –ú–ï–ù–Æ
  const MENU_LIST_SELECTOR = '.menu__list';
  const MENU_ITEM_SELECTOR = '.menu__item, .menu__list > *';

  // –£—Ç–∏–ª–∏—Ç—ã
  const norm = s => (s ? String(s).trim().toLowerCase() : '');

  function canonicalFromLabel(label){
    const n = norm(label);
    for (const key in ALIASES){
      const arr = ALIASES[key];
      for (let i=0;i<arr.length;i++){
        if (norm(arr[i]) === n) return key;
      }
      if (norm(key) === n) return key;
    }
    return null;
  }

  function isInWhitelist(canonical){
    if (!canonical) return false;
    return WHITELIST_ORDER.some(w => norm(w) === norm(canonical));
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
  function invokeSearch(){
    console.log('MenuFilter: Opening search...');
    
    // 1) –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Lampa API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    try {
      if (window.Lampa && Lampa.Controller) {
        if (typeof Lampa.Controller.toggle === 'function') {
          Lampa.Controller.toggle('search');
          return true;
        }
        if (typeof Lampa.Controller.call === 'function') {
          Lampa.Controller.call('search');
          return true;
        }
      }
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ Lampa
      if (window.Lampa && Lampa.search && typeof Lampa.search.open === 'function') {
        Lampa.search.open();
        return true;
      }
      
      if (window.Lampa && Lampa.app && Lampa.app.header && typeof Lampa.app.header.search === 'function') {
        Lampa.app.header.search();
        return true;
      }
      
      if (window.Lampa && Lampa.router) {
        Lampa.router.navigate('search');
        return true;
      }
    } catch(e) {
      console.log('MenuFilter: Lampa API search failed', e);
    }

    // 2) –ö–ª–∏–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞
    const btnSelectors = [
      '[data-action="search"]',
      '.head__action--search', 
      '.head__search',
      '.header .search',
      '.search-button',
      '.icon-search',
      'button[onclick*="search"]',
      'button[onclick*="Search"]'
    ];
    
    for (const selector of btnSelectors){
      const button = document.querySelector(selector);
      if (button && typeof button.click === 'function'){
        button.click();
        console.log('MenuFilter: Clicked search button via selector:', selector);
        return true;
      }
    }

    // 3) –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
    try {
      const searchEvent = new CustomEvent('lampa-search-open', { bubbles: true });
      document.dispatchEvent(searchEvent);
      window.dispatchEvent(searchEvent);
      console.log('MenuFilter: Dispatched search event');
      
      // –î–∞–¥–∏–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
      setTimeout(() => {
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞
        const searchModal = document.querySelector('.search, .search-modal, [class*="search"]');
        if (!searchModal) {
          // 4) –ë—ç–∫–∞–ø: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ Slash
          const keyEvent = new KeyboardEvent('keydown', { 
            key: '/', 
            code: 'Slash', 
            keyCode: 191,
            bubbles: true,
            cancelable: true
          });
          document.dispatchEvent(keyEvent);
          console.log('MenuFilter: Dispatched Slash key event');
        }
      }, 100);
      
      return true;
    } catch(e) {
      console.log('MenuFilter: Event dispatch failed', e);
    }

    return false;
  }

  // –°–æ–∑–¥–∞—Ç—å —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç ¬´–ü–æ–∏—Å–∫¬ª
  function createSearchItem(){
    const el = document.createElement('div');
    el.className = 'menu__item selector focusable menu-filter__search';
    el.setAttribute('tabindex', '0');
    el.setAttribute('role', 'button');
    el.setAttribute('data-action', 'search');
    el.innerHTML = '<div class="menu__ico">üîç</div><div class="menu__text">–ü–æ–∏—Å–∫</div>';

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const handleSearch = function(e) {
      if (e.type === 'keydown' && e.key !== 'Enter' && e.key !== ' ' && e.keyCode !== 13 && e.keyCode !== 32) {
        return;
      }
      
      if (e.type === 'keydown') {
        e.preventDefault();
        e.stopPropagation();
      }
      
      console.log('MenuFilter: Search item activated');
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–∞–¥–∏–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Lampa
      setTimeout(() => {
        invokeSearch();
      }, 50);
    };

    el.addEventListener('click', handleSearch);
    el.addEventListener('keydown', handleSearch);

    return el;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞
  function updateSearchItem(el){
    if (!el._menu_filter_bound) {
      el.classList.add('selector', 'focusable', 'menu-filter__search');
      el.setAttribute('tabindex', '0');
      el.setAttribute('role', 'button');
      el.setAttribute('data-action', 'search');
      
      const handleSearch = function(e) {
        if (e.type === 'keydown' && e.key !== 'Enter' && e.key !== ' ' && e.keyCode !== 13 && e.keyCode !== 32) {
          return;
        }
        
        if (e.type === 'keydown') {
          e.preventDefault();
          e.stopPropagation();
        }
        
        console.log('MenuFilter: Existing search item activated');
        
        setTimeout(() => {
          invokeSearch();
        }, 50);
      };

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∏
      el.removeEventListener('click', handleSearch);
      el.removeEventListener('keydown', handleSearch);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      el.addEventListener('click', handleSearch);
      el.addEventListener('keydown', handleSearch);
      
      el._menu_filter_bound = true;
    }
    return el;
  }

  function applyMenuFilter(root){
    if (!root) return;

    const items = Array.from(root.querySelectorAll(MENU_ITEM_SELECTOR));
    const present = {};
    let hasSearch = false;

    // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: —Å–æ–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
    for (const el of items){
      const labelNode = el.querySelector('.menu__text') || el;
      const label = labelNode ? labelNode.textContent : '';
      const canonical = canonicalFromLabel(label);

      if (!canonical || !isInWhitelist(canonical)){
        el.remove();
        continue;
      }

      if (norm(canonical) === norm('–ü–æ–∏—Å–∫')) {
        hasSearch = true;
        present[canonical] = updateSearchItem(el);
      } else {
        present[canonical] = el;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
    const frag = document.createDocumentFragment();
    
    for (const desired of WHITELIST_ORDER){
      const node = present[desired];
      
      if (node) {
        frag.appendChild(node);
      } else if (norm(desired) === norm('–ü–æ–∏—Å–∫') && !hasSearch) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const searchNode = createSearchItem();
        frag.appendChild(searchNode);
        hasSearch = true;
      }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
    root.innerHTML = '';
    root.appendChild(frag);
    
    console.log('MenuFilter: Menu filtered successfully');
  }

  function init(){
    let tries = 0;
    const maxTries = 200; // ~20 —Å–µ–∫—É–Ω–¥
    
    const checkMenu = function() {
      const root = document.querySelector(MENU_LIST_SELECTOR);
      tries++;

      if (root){
        try { 
          applyMenuFilter(root); 
          
          // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –º–µ–Ω—é
          const observer = new MutationObserver(function(mutations) {
            let shouldUpdate = false;
            for (const mutation of mutations) {
              if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                shouldUpdate = true;
                break;
              }
            }
            if (shouldUpdate) {
              setTimeout(() => {
                try { applyMenuFilter(root); } catch(e) {
                  console.error('MenuFilter: Observer error', e);
                }
              }, 100);
            }
          });
          
          observer.observe(root, { childList: true, subtree: false });
          
          console.log('MenuFilter: Plugin initialized successfully');
        } catch(e) {
          console.error('MenuFilter: Initial filter error', e);
        }
        return true;
      }

      if (tries < maxTries) {
        setTimeout(checkMenu, 100);
      } else {
        console.error('MenuFilter: Menu not found after', maxTries, 'tries');
      }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    setTimeout(checkMenu, 100);
  }

  // –ó–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

})();
