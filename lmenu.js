//menu_filter.js
/*
  Lampa Menu Filter ‚Äî v1.0 (2025-10-24)
  –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –ª–µ–≤–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—É–Ω–∫—Ç ¬´–ü–æ–∏—Å–∫¬ª.
  –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ["–ü–æ–∏—Å–∫","–§–∏–ª—å–º—ã","–°–µ—Ä–∏–∞–ª—ã","–ö–∞—Ç–∞–ª–æ–≥","–ò—Å—Ç–æ—Ä–∏—è","–†–µ–ª–∏–∑—ã"].

  –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
  - –ñ–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è DOM-—ç–ª–µ–º–µ–Ω—Ç–∞ –ª–µ–≤–æ–≥–æ –º–µ–Ω—é ('.menu__list'), –∑–∞—Ç–µ–º:
      * —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—É–Ω–∫—Ç—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫,
      * –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Ä—è–¥–∫—É –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ,
      * –µ—Å–ª–∏ –ø—É–Ω–∫—Ç–∞ ¬´–ü–æ–∏—Å–∫¬ª –≤ –º–µ–Ω—é –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ; –ø–æ –∫–ª–∏–∫—É –≤—ã–∑—ã–≤–∞–µ—Ç —à—Ç–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ ('.head__search').
  - –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–µ—Ä–µ—Å–±–æ—Ä–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ MutationObserver.
  - –ù–µ —Ç—Ä–æ–≥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä—ã/–∏—Å—Ç–æ—á–Ω–∏–∫–∏; —Ç–æ–ª—å–∫–æ DOM –º–µ–Ω—é.

  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
  1) –ü–æ–¥–Ω–∏–º–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ—Ç–¥–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ —Å–µ—Ç–∏ (–ø—Ä–∏–º–µ—Ä: `python3 -m http.server 8000` –≤ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–æ–º).
  2) –í Lampa: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –†–∞—Å—à–∏—Ä–µ–Ω–∏—è/Plugins ‚Üí –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω ‚Üí —É–∫–∞–∂–∏ URL –≤–∏–¥–∞:
       http://<IP_—Ç–≤–æ–µ–π_–º–∞—à–∏–Ω—ã>:8000/menu_filter.js
  3) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ Lampa. –ì–æ—Ç–æ–≤–æ.
*/

(function(){
  'use strict';

  /*** === –ù–ê–°–¢–†–û–ô–ö–ò === ***/
  // –ü—É–Ω–∫—Ç—ã –∏ –ø–æ—Ä—è–¥–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –æ—Å—Ç–∞—Ç—å—Å—è –≤ –ª–µ–≤–æ–º –º–µ–Ω—é
  var WHITELIST = [
    '–ü–æ–∏—Å–∫',
    '–§–∏–ª—å–º—ã',
    '–°–µ—Ä–∏–∞–ª—ã',
    '–ö–∞—Ç–∞–ª–æ–≥',
    '–ò—Å—Ç–æ—Ä–∏—è',
    '–†–µ–ª–∏–∑—ã'
  ];

  // –°–∏–Ω–æ–Ω–∏–º—ã/–≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π (key = "–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è", values = –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏)
  var ALIASES = {
    '–ü–æ–∏—Å–∫'   : ['–ü–æ–∏—Å–∫','Search'],
    '–§–∏–ª—å–º—ã'  : ['–§–∏–ª—å–º—ã','Movies','–§–∏–ª—å–º—ã HD','HD –§–∏–ª—å–º—ã'],
    '–°–µ—Ä–∏–∞–ª—ã' : ['–°–µ—Ä–∏–∞–ª—ã','Series','TV Shows'],
    '–ö–∞—Ç–∞–ª–æ–≥' : ['–ö–∞—Ç–∞–ª–æ–≥','Library','Catalog','Browse'],
    '–ò—Å—Ç–æ—Ä–∏—è' : ['–ò—Å—Ç–æ—Ä–∏—è','History','Recently watched'],
    '–†–µ–ª–∏–∑—ã'  : ['–†–µ–ª–∏–∑—ã','Releases','HD –†–µ–ª–∏–∑—ã','HD Releases']
  };

  // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –º–µ–Ω—é
  var MENU_LIST_SELECTOR = '.menu__list';
  var MENU_ITEM_SELECTOR = '.menu__item, .menu__list > *';

  // --- –£—Ç–∏–ª–∏—Ç—ã ---
  function normalizeLabel(text){
    if (!text) return '';
    return String(text).trim().toLowerCase();
  }

  function matchToCanonical(label){
    var norm = normalizeLabel(label);
    for (var canonical in ALIASES){
      var arr = ALIASES[canonical];
      for (var i=0;i<arr.length;i++){
        if (normalizeLabel(arr[i]) === norm) return canonical;
      }
    }
    for (var canonical2 in ALIASES){
      if (normalizeLabel(canonical2) === norm) return canonical2;
    }
    return null;
  }

  function allowed(canonical){
    if (!canonical) return false;
    for (var i=0;i<WHITELIST.length;i++){
      if (normalizeLabel(WHITELIST[i]) === normalizeLabel(canonical)) return true;
    }
    return false;
  }

  // –°–æ–∑–¥–∞—ë–º –ø—É–Ω–∫—Ç ¬´–ü–æ–∏—Å–∫¬ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  function createSearchItem(){
    var li = document.createElement('div');
    li.className = 'menu__item focusable menu-filter__search';
    li.setAttribute('tabindex','0');
    li.innerHTML = '<div class="menu__ico">üîç</div><div class="menu__text">–ü–æ–∏—Å–∫</div>';

    var openSearch = function(){
      var headBtn = document.querySelector('.head__search, .head__action--search, [data-action="search"]');
      if (headBtn && typeof headBtn.click === 'function'){
        headBtn.click();
        return;
      }
      try{
        if (window.Lampa && Lampa.Controller && typeof Lampa.Controller.toggle === 'function'){
          Lampa.Controller.toggle('search');
          return;
        }
      }catch(e){}
      var ev = new KeyboardEvent('keydown', { key: '/', code: 'Slash', bubbles: true });
      document.dispatchEvent(ev);
    };

    li.addEventListener('click', openSearch);
    li.addEventListener('keydown', function(e){
      if (e.key === 'Enter' || e.key === 'OK' || e.keyCode === 13) {
        e.preventDefault();
        openSearch();
      }
    });

    return li;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏/—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏—è
  function applyMenuFilter(root){
    if (!root) return;

    var items = Array.prototype.slice.call(root.querySelectorAll(MENU_ITEM_SELECTOR));
    var present = {};

    items.forEach(function(el){
      var labelNode = el.querySelector('.menu__text') || el;
      var text = labelNode ? labelNode.textContent : '';
      var canonical = matchToCanonical(text);

      if (!canonical || !allowed(canonical)) {
        el.remove();
        return;
      }
      if (!present[canonical]) present[canonical] = el;
    });

    var fragment = document.createDocumentFragment();
    var hasSearch = false;

    WHITELIST.forEach(function(name){
      var canon = matchToCanonical(name) || name;
      var node = present[canon];

      if (normalizeLabel(canon) === normalizeLabel('–ü–æ–∏—Å–∫')) {
        hasSearch = !!node;
      }
      if (node) fragment.appendChild(node);
    });

    if (!hasSearch){
      fragment.insertBefore(createSearchItem(), fragment.firstChild);
    }

    while (root.firstChild) root.removeChild(root.firstChild);
    root.appendChild(fragment);
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ–≥–æ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
  function waitMenuAndApply(){
    var tries = 0;
    var iv = setInterval(function(){
      var root = document.querySelector(MENU_LIST_SELECTOR);
      tries++;

      if (root){
        clearInterval(iv);
        try { applyMenuFilter(root); } catch(e){}

        var mo = new MutationObserver(function(){
          try {
            if (waitMenuAndApply._t) clearTimeout(waitMenuAndApply._t);
            waitMenuAndApply._t = setTimeout(function(){ applyMenuFilter(root); }, 50);
          } catch(e){}
        });
        mo.observe(root, { childList: true, subtree: false });
      }

      if (tries > 200) { // ~20 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
        clearInterval(iv);
      }
    }, 100);
  }

  if (document.readyState === 'complete' || document.readyState === 'interactive'){
    setTimeout(waitMenuAndApply, 0);
  } else {
    document.addEventListener('DOMContentLoaded', waitMenuAndApply);
  }

})();
